package main

import (
	"github.com/stretchr/testify/require"
	"testing"
)

func TestParse(t *testing.T) {

	input := `.#.#.#
...##.
#....#
..#...
#.#..#
####..`

	expected := [][]int{}

	row0 := []int{0, 1, 0, 1, 0, 1}
	row1 := []int{0, 0, 0, 1, 1, 0}
	row2 := []int{1, 0, 0, 0, 0, 1}
	row3 := []int{0, 0, 1, 0, 0, 0}
	row4 := []int{1, 0, 1, 0, 0, 1}
	row5 := []int{1, 1, 1, 1, 0, 0}

	expected = append(expected, row0)
	expected = append(expected, row1)
	expected = append(expected, row2)
	expected = append(expected, row3)
	expected = append(expected, row4)
	expected = append(expected, row5)

	result := parse(input)

	require.Equal(t, expected, result)
}

func TestSwitch(t *testing.T) {

	input := [][]int{}

	row0 := []int{1, 1, 0}
	row1 := []int{0, 1, 0}
	row2 := []int{0, 0, 0}

	input = append(input, row0)
	input = append(input, row1)
	input = append(input, row2)

	expected := [][]int{}

	//A light which is on stays on when 2 or 3 neighbors are on, and turns off otherwise.
	//A light which is off turns on if exactly 3 neighbors are on, and stays off otherwise.

	_row0 := []int{1, 1, 0}
	_row1 := []int{1, 1, 0}
	_row2 := []int{0, 0, 0}

	expected = append(expected, _row0)
	expected = append(expected, _row1)
	expected = append(expected, _row2)

	result := switchLights(input)

	require.Equal(t, expected, result)
}

func TestSwitch2(t *testing.T) {

	input := [][]int{}

	row0 := []int{1, 1, 1}
	row1 := []int{1, 1, 1}
	row2 := []int{1, 1, 1}
	row3 := []int{1, 1, 1}

	input = append(input, row0)
	input = append(input, row1)
	input = append(input, row2)
	input = append(input, row3)

	expected := [][]int{}

	//A light which is on stays on when 2 or 3 neighbors are on, and turns off otherwise.
	//A light which is off turns on if exactly 3 neighbors are on, and stays off otherwise.

	_row0 := []int{1, 0, 1}
	_row1 := []int{0, 0, 0}
	_row2 := []int{0, 0, 0}
	_row3 := []int{1, 0, 1}

	expected = append(expected, _row0)
	expected = append(expected, _row1)
	expected = append(expected, _row2)
	expected = append(expected, _row3)

	result := switchLights(input)

	require.Equal(t, expected, result)
}

func TestSwitch3(t *testing.T) {

	input := [][]int{}

	//	.#.#.#
	//...##.
	//#....#
	//..#...
	//#.#..#
	//####..

	row0 := []int{0, 1, 0, 1, 0, 1}
	row1 := []int{0, 0, 0, 1, 1, 0}
	row2 := []int{1, 0, 0, 0, 0, 1}
	row3 := []int{0, 0, 1, 0, 0, 0}
	row4 := []int{1, 0, 1, 0, 0, 1}
	row5 := []int{1, 1, 1, 1, 0, 0}

	input = append(input, row0)
	input = append(input, row1)
	input = append(input, row2)
	input = append(input, row3)
	input = append(input, row4)
	input = append(input, row5)

	expected := [][]int{}
	//..##..
	//..##.#
	//...##.
	//......
	//#.....
	//#.##..
	//A light which is on stays on when 2 or 3 neighbors are on, and turns off otherwise.
	//A light which is off turns on if exactly 3 neighbors are on, and stays off otherwise.

	_row0 := []int{0, 0, 1, 1, 0, 0}
	_row1 := []int{0, 0, 1, 1, 0, 1}
	_row2 := []int{0, 0, 0, 1, 1, 0}
	_row3 := []int{0, 0, 0, 0, 0, 0}
	_row4 := []int{1, 0, 0, 0, 0, 0}
	_row5 := []int{1, 0, 1, 1, 0, 0}

	expected = append(expected, _row0)
	expected = append(expected, _row1)
	expected = append(expected, _row2)
	expected = append(expected, _row3)
	expected = append(expected, _row4)
	expected = append(expected, _row5)

	result := switchLights(input)

	require.Equal(t, expected, result)
}

func TestNeightbourOnCount(t *testing.T) {

	input := [][]int{}

	row0 := []int{0, 1, 0}
	row1 := []int{0, 0, 1}
	row2 := []int{1, 1, 1}

	input = append(input, row0)
	input = append(input, row1)
	input = append(input, row2)

	result := neighbourOnCount(input, 1, 1)
	expected := 5
	require.Equal(t, expected, result)

	result2 := neighbourOnCount(input, 0, 0)
	expected2 := 1
	require.Equal(t, expected2, result2)

	result3 := neighbourOnCount(input, 2, 2)
	expected3 := 2
	require.Equal(t, expected3, result3)
}

func TestCount(t *testing.T) {

	input := [][]int{}

	row0 := []int{0, 1, 0}
	row1 := []int{0, 0, 1}
	row2 := []int{1, 1, 1}

	input = append(input, row0)
	input = append(input, row1)
	input = append(input, row2)

	result := countLights(input)
	expected := 5
	require.Equal(t, expected, result)

}

//

var tests = []struct {
	input    string
	loops    int
	expected int
}{
	{
		`.#.#.#
...##.
#....#
..#...
#.#..#
####..`,
		1,
		11,
	},
	{
		`.#.#.#
...##.
#....#
..#...
#.#..#
####..`,
		2,
		8,
	},
	{
		`.#.#.#
...##.
#....#
..#...
#.#..#
####..`,
		3,
		4,
	},
	{
		`.#.#.#
...##.
#....#
..#...
#.#..#
####..`,
		4,
		4,
	},
	{
		day18data,
		100,
		1061,
	},
}

func TestRun(t *testing.T) {
	for _, test := range tests {
		if actual := run(test.input, test.loops, false); actual != test.expected {
			t.Errorf("Convert(%s) = %d, expected %d.",
				test.input, actual, test.expected)
		}
	}
}

func TestOverrideCorners(t *testing.T) {

	input := [][]int{}
	row0 := []int{0, 0, 0}
	row1 := []int{0, 0, 0}
	row2 := []int{0, 0, 0}

	input = append(input, row0)
	input = append(input, row1)
	input = append(input, row2)

	expected := [][]int{}
	_row0 := []int{1, 0, 1}
	_row1 := []int{0, 0, 0}
	_row2 := []int{1, 0, 1}

	expected = append(expected, _row0)
	expected = append(expected, _row1)
	expected = append(expected, _row2)

	result := overrideCorners(input)
	require.Equal(t, expected, result)
}

var tests2 = []struct {
	input    string
	loops    int
	override bool
	expected int
}{
	{
		`##.#.#
...##.
#....#
..#...
#.#..#
####.#`,
		1,
		true,
		18,
	},
	{
		`##.#.#
...##.
#....#
..#...
#.#..#
####.#`,
		2,
		true,
		18,
	},
	{
		day18data,
		100,
		true,
		1006,
	},
}

func TestRunOverrideCorners(t *testing.T) {
	for _, test := range tests2 {
		if actual := run(test.input, test.loops, test.override); actual != test.expected {
			t.Errorf("Convert(%s) = %d, expected %d.",
				test.input, actual, test.expected)
		}
	}
}

const day18data = `#..####.##..#...#..#...#...###.#.#.#..#....#.##..#...##...#..#.....##..#####....#.##..##....##.#....
.#..#..#..#.###...##..#.##.....#...#..##....#####.##............####.#..######..#.#.##.#...#..#...##
#.....##.##.##.#..##.#..###...#.#.#..##..###.####.####.#.####.#...##.#..###.........#.###...#....###
#.###..#######..##..#.....##.#.#.###.#.##..#.##..##.##.#.##...###.#...#.#####.#.##..#.#####..#.#####
#.##.##.###.##..###.#.##.##...##.#.#..##..###.########.#.####..####...#####...#..#...##....##.##.##.
..#.#.#.#..#.#.###....###...#...#.##..####.###.....#.####.###.###.#......#.#.###..#..#.#....#.#####.
...#.###.#....#.###...#.#.#...#...#.#####....#....#...#####..#..#.#..######..#.##.#.##.#..###.#...##
.###...#...#.#..#.#.####.#...#.....##...###.#....#..##.###....#.##....###..#.#####...###.#.##.####..
#.#....##.#.....#####.#.##..#######.#.####..###.##.#####.##.#...###...#.#...###..#...#.#.###.###.###
...##.##.....##..#.##...#.#...#...#.#####.#...#.#.#.#####.##.#...#.#..##.##..#...#....####..###.###.
#..#....######...#...###.#....#####....#.#.#....#....#.#######.#####..#....#....#.##..#.##.###..#...
#####.#.######.#.#####.#..##..##..####..#....#...#######....##..##.#..###..###.###..###...#...######
#...##..##...###....##..##.##..#.#.#.#....##.#.......###..###..###...###..##.##.##.#.#.#..#.#..#..#.
..###....##.###..#.#..########...###...##..#######....##..###..#####.##.#....###..##.##.##.#...##.#.
###..#.#..#.#.##.##...##.....#..###.#..##.##.#....##.#.######..##..#.#.##.###...#..####...#.#..#.###
.######....#..##..#.####.##..#.#..#.#..#....#..##.#..#.#...####..#....#.####.#.###.#...####.#...#.#.
#.######.##..###.###..#..###.#...#..#...#...###.##....#.#......#...#.##.#.###..#.#####.#.#..###..#.#
...#..#...####..###.########.....###.###.#..##.##....######..#..#.....#.##.##.#..##..#..##...#..#..#
#..#..##..#.#.########.##.#.####..#.#####.#.###.##....###..##..#.#.###..#.##..##.##.####...######.##
.######.###....#...##...#..#....##..#.#...###.######.##...#....##.##.#.#.##..#...###.###.#....#..##.
####.#.##..##.##.###...#.###.##..##....###..####.##..#.#.##..###.#..##...####...#..####.#.#..##...#.
.#.#..#.....##...#..#...#.#...#.#.##..#....#..#......#####.#######....#.#..#..###..##.#.########..##
.##.#..#..##..#..####.#...####...#...#..##.#..###.#..######..#.#...###.##...#..#####..##.#..##.#.##.
.###..##.##.##....###.###..#.#...##.#.#...#.#######.####..#..###.#######.#...#.#...#.##...#..####..#
##.########..#..#....#.###..##.##.#.##.#..#......####..##.##.#..####..#####..#.....#####.###..#.#.#.
.#..####..##.#.#..#####.##..#..#.#....#.#####.#####...######........##.##..##.#.#.###..#.#.#.#..##.#
.##..##..#.######..###....#.#.###.#........#..###..#.########.....#.##...#.....#..#...##...#..#.###.
##.##.#..####....####.#######.....#.#.#...#.######.#.....####.####...###..####.##.##....###..#..#...
#.#..####...#......#...###...##....##.#######..#.###.#...###.##.##...####..#.####..#......##..#####.
.#.#...##...#....#.####.##.....#....#.#.#######..###.#.....#.....####...##...#.#.##.####..##.###.#.#
####.#.#.####...#...####.#.....#.#######.#.......####......###..###.#...######..#.##.#.##..#..##..##
..##.###..#..####..####.......######.##..#.....##.##...##.##......#.###..###...#.##.#####.#.######.#
.###..####.###..#..#.......#.##...##...##.######.....#..####.#......#.#...#...#...###...#.#.##..####
.####....##.##.#.....##.###.####.#.......#.......#.#..#.#.#.....###.#.#####.#..#.#.#####.#####.###.#
.##.#.###.#####..#..#....###.#.#.#..#..###..##..####..##.###....#..####.####.#..###.#..######.######
####.#.....##..###....#.....#.##.#.##..##..########.#####..###.####....##.....######.#.#.##.......#.
#.#.##.....#.....##.###.#..#.##.##....#..##....##.#.###.##.#..#..##.##.###.#..##.###...##..###.#####
#.###.#.#.#.#.#.#.#...#..#.###..####.##...#..####.###....#..#..##.#....####..##.##....#.#.##.##....#
...######....#..####...#.#..#.#.#..#.##.#.#.......#..#......##..#...#..#..##...##.#...#.#.#...##.##.
.#####..#...####....#..###..##....#####..###.#.#...###..###.###..##...#......#...#...#.#.#...#.##..#
......#####.#...#.#.#.##..#.###..##..#.#...###..###....##..#####..#######.#..#.###....###...##.#..#.
..##.########.##..#....##.#...##.##.#.#..#.##..#.#.#.##....#.#.#.#.##....##....#....#####.##..#.##.#
####...#....##.#.###......##.##.#..##...#..#####..#.#....##..#####...#.#.##...#.####.####..##.######
.##.###.##.#...#.#....###.#######...##...##..#..##.###.#.####..#..###......#.#.##.#.#....#..##...#..
.#.###.#.###.###.#.##.#..#......####.##...#..##.#..####.....#...#.###.##.##.#..#.##..#.###......#..#
...##.####......#.#.#..###..#....###....#.##.#####..#..#..#...#.#.###...#.#.#.##....###.####..###.#.
##..#.#.#.#....####...#.##.###..####....#..#####.######..#.##.##..#####.#.....#.#...##.#.##.##.#.#..
#..##.#.#.#.###.#.#.###...#.#...##..#..#.#.#.##..###...#..##.#..#.#.#..#.....#.######.#.###..###.#..
....#.#.##.###.##...#.##.#....#..##.#..##...#...#.##.####...##..####.#.........#..##..#...#...##.#..
.##.......##...###.##.#.##.###.##.#..#..#..####...#...#....#####...###..##..#..#..##...#....#..#####
..####..#...#...#..###....##.#.#####..#..#.....#......#...#.......##....####...##....##.##.#.#####.#
##.#.#.#..##..##..#.####.##.##.###.#...###.#....#.....#.###...#######..###.####.###.####.##...##.#..
..#.#...##.#....#..#..##.####.....#.#.#...#..#..###.#..###.#####.#.#####.#.#.#.#.###.##.###..#....##
.###.#...#....###..#...####....####..#.##..#..##.###..#.#.#.#..#...###.#.#...#......#...#.##.##.#...
..####.####.##.#.##....#...##....#..#....#..###..#...#..###.#####.....#####..##.#.#.#.#.#.##.####...
...##.#.##.####..##.###..#.#.#.#.#.#.#..###...#.##..#.####.##...#.#.##......###..#...###....#.#.###.
##...##..#.#.##..#.#.#....#.####.......#.#.#######.#..#....#.###.#...###.##....###.#.#..#.#.##.####.
...##.......######.....##....#...#..#.##.###.#..#.##.###.#.###.#.#.#...#.#...##.##.##..#.##########.
###..#....#.#.....#....###.#...##.......##.#.#..#.#...########......###..##.#..#..####.##..####...#.
......##.###.#.###.....#..#...#.#......##....#....#........#..#...##.##.....#...##.##.........##....
.##.##.#.#...#....######..##....##..##.#.#.##.#.##..##...#..###......##......#.#....#.#.#.......###.
.......#.##..##.#...#.##..#..#####.#..#.######.........###.#####.####.#...##...........##...##..####
#......#.#..#...#...##..#.#.###.##.##.#.#..#.###.##.#..###..#.###..#...###.##..###..#...#..###...#..
####.##..#####..####.#...#..#..###..##.#.#...#...#...#.##.####.##.###....###...#.#.#..####.######.##
.....#..####...#.#.#.####..####..##.###......#.....########.#...#.#..#..#...#.###..##.#####..###.###
.#######.#.##..###.#...###.#####............##.###...#.##.#.##..##.#.#..#.######..######..#..#..####
...##..#.####...#..#.#.##.#....#.####..#..###.###..#.#...#....##.##.#......##..##..#.#.#.###..#..#..
........#...#.##.#.#..#....####....#.##...###..####...###.#.#..######..###..##.#####.###.###.#.#...#
##......##.#..###.####.##.#.###.#.......#.##..####..#.###.##..##..##...##...#.###...#.#..#..#.#####.
##..#.#.....##.####.#..##.#.##.#.#...#...#.#...####.#.#.##...##....##.###..###.####.#...#.###..#####
.#####.####.####.####.#.##.##......###....###.####...###...#...#..#.##.#.#####.###..##.#..###...##..
.#...#..##...##...#....#.#.#..##..#.##..#.###.#.###..###.#.#.###.#....#######.####.##..#..#...####..
..##.##..#.##..#.#.###..#.##.########...####.#.###.##..#..###.###...##..##.#..#.######.##.#....###.#
##.#####.###.##.#.##.##.##.###..##..##..#.#.#.#.####..#......#.#.#.#.#.#.##...#####.####...#.#...#.#
.#..###..##.#####.#.##.#..##...##..##...#####.#.####..#...##.....######.#.#...##.#..#######.###.###.
#.#..##.#.#####.#.#.....###.###.#..##.#####....#.###.##.##.#.#..##..#.#....#######.###.#.#.....#.###
....###...#.###.####....###.....##....#####.##.###.###.##.##.##.#..###..######...####.#.#..####..#..
###.....#..####..#.####..#..#...##.##..##.######.####.....#...##....#..#.##.#####..###.##.#.####...#
.##.##.#...#..####...##.##.###...#...#..#.#.#####.....####...#.#.#..#.####...####.#...###.#......###
###.##....#.#.#...#.###....####..##...##.##.##.#..#...####..#..#..##...#####.####.####...##.#..###.#
..####.....##..###.#.#.###.########..#...#.##..#.#.#.......#.##.#..#...####.##.#..#.######..#.#...#.
#.#.##.#.#.##.#....##......##......#######.#..#.##...##..#.#.###...#.#..#..###...#..###.....##.....#
..#.##.#.##.#.##..##.....#.#..#.#..#...##..#..#.#....###.#####....####.####..#####.##.###...#..###.#
#....#.###..#..########.###..#.#.#.##...##.#..##.###..#..#..#.#.##..###...###.#.##..#.##.#..#.#.####
#.......#######......#...#...##.##...###.#....##.#..#....####.#.##.###...#.#####...##.###........##.
.##.####.....###.##......####.###.########..#.####..#.##.#.####.....#...#.##....#######.##..#......#
#.#.##.##....##..##.#.###..#.##.#..#..#.#..##.....###..###.##.##.####.##.#.#.##...####..#.#..##.#.#.
...##.#.#.#...###.#.......#.#.....#.#...##....##.##.##.####...#.#..#..#..#.#.##.#..#.#.#....###..#.#
....#.#.###.#####.##..###..##..#...#.##.#......##.####.#..####.#.##..####.#.#...##..#####..##.#.#...
..###.#.##..#....#..#.#.....##.#####..##....#.#...#.##..##.#.#..#...##.##..##..##....#...#..#..#..##
##.#.##.#...#.###.##.##.##.##..##.##...#..##.#..#######.#..#...#.#.##..#....##.#..####.###........#.
.##.#..#.....#####..##.#.#.#.#..###.#######.###.###....##....#.#.#.###....###.#..#.#....#.#..###...#
...###.#.#.###..#...#..###.######..##.#.#..#...####.#####.##..#..###...#..#..#..###..##.#.#...#.###.
#......#.#..#..##.##.#.##.#.###.#.##.#.#..#....#.##..#..##..##.#.#.#....##.###.###.####.#.#####...##
...#.##..#.######.......#.#.###.....#####....##.#.#.###........#.#.###.#.#########.##.##.#..##..#...
##..###..###....####.##.##..##.###....####..##...####.####..####..###.####..##.#...###.#####.##.##.#
###...##.#.#.#####..#..#####...##.#...#.#.###.#..##..###.##.#.#.....####.##.#..##.###.#...##.##...##
...#.#.##.##..##....#..#.#####.##.###..#.#.#........####.###.##....##....####..#.#....#.#.#.###..#.#
..#.#.#.#.###...#....##..######.##....#.#.##..###..#.#.###..#.##..#.#.###......#..#..#.####..#...##.
.....####.#.....###.#.##.#..##.#..###.#####.#..##...###.#..###..#..##....###.#..##.#..#.##.#..#...##`
